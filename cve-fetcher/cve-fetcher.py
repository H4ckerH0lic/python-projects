import requests
import argparse
from colorama import Fore, Style

def parse_cve(cve_data):
    cve = cve_data["cve"]

    # Basic info
    cve_id = cve["id"]
    description = cve["descriptions"][0]["value"]

    # Severity (handle CVSSv2 or v3)
    severity = "N/A"
    score = "N/A"
    if "metrics" in cve:
        if "cvssMetricV2" in cve["metrics"]:
            cvss = cve["metrics"]["cvssMetricV2"][0]["cvssData"]
            severity = cve["metrics"]["cvssMetricV2"][0].get("baseSeverity", "N/A")
            score = cvss.get("baseScore", "N/A")

    # Affected products (CPEs)
    products = []
    for conf in cve.get("configurations", []):
        for node in conf.get("nodes", []):
            for cpe in node.get("cpeMatch", []):
                if cpe.get("vulnerable", False):
                    products.append(cpe["criteria"])

    # References
    refs = [ref["url"] for ref in cve.get("references", [])]

    # Print results
    print(f"{Fore.GREEN}[+] {cve_id}{Style.RESET_ALL}")
    print(f"    Description: {description}")
    print(f"    Severity: {Fore.RED}{severity}{Style.RESET_ALL} | Score: {score}")
    print(f"    Products: {', '.join(products) if products else 'N/A'}")
    print(f"    References:")
    for ref in refs:
        print(f"       - {ref}")
    print("\n")


def fetch_cves(keyword):
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={keyword}"
    response = requests.get(url)

    if response.status_code != 200:
        print(Fore.RED + "[-] Failed to fetch CVEs" + Style.RESET_ALL)
        return

    data = response.json()
    cves = data.get("vulnerabilities", [])

    if not cves:
        print(Fore.YELLOW + "[!] No CVEs found." + Style.RESET_ALL)
        return

    for item in cves:
        parse_cve(item)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Fetch CVEs from NVD API")
    parser.add_argument("keyword", help="Keyword (e.g., windows, apache, openssl)")
    args = parser.parse_args()

    fetch_cves(args.keyword)
